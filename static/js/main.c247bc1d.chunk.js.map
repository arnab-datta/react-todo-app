{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","taskItem","list","todoValue","val","replace","trim","newItem","id","Date","now","value","isDone","todoList","this","push","setState","alert","delTaskId","updatedtodoList","filter","item","inputTask","isChecked","taskId","foundItemIndex","findIndex","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addTodoItem","disabled","length","map","key","name","checked","handleCheck","deleteTodoItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOA8HeA,G,6DAvHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,KAAM,IAJS,E,wDAQPC,GACV,IAAIC,EAAMD,EAAUE,QAAQ,kBAAmB,IAC/C,GAAmB,KAAfD,EAAIE,OAAe,CACrB,IAAMC,EAAU,CACdC,GAAIC,KAAKC,MACTC,MAAOP,EACPQ,QAAQ,GAEJC,EAAQ,YAAOC,KAAKd,MAAME,MAChCW,EAASE,KAAKR,GACdO,KAAKE,SAAS,CACZd,KAAMW,EACNZ,SAAU,UAGZgB,MAAM,mB,qCAIKC,GACb,IACMC,EADQ,YAAOL,KAAKd,MAAME,MACCkB,QAAO,SAACC,GAAD,OAAUA,EAAKb,KAAOU,KAC9DJ,KAAKE,SAAS,CACZd,KAAMiB,M,kCAIEG,GACVR,KAAKE,SAAS,CACZf,SAAUqB,M,kCAIFC,EAAWC,GACrB,IAAIX,EAAQ,YAAOC,KAAKd,MAAME,MACxBuB,EAAiBZ,EAASa,WAAU,SAACL,GAAD,OAAUA,EAAKb,KAAOgB,KAChEX,EAASY,GAAgBb,OAASW,EAClCT,KAAKE,SAAS,CACZd,KAAMW,M,+BAIA,IAAD,OACP,OACE,6BACE,yBAAKc,UAAU,aACb,0BAAMA,UAAU,WACd,yBAAKA,UAAU,cACb,wBAAIA,UAAU,eAAd,YACA,yBAAKA,UAAU,mCACb,2BACEC,KAAK,SACLD,UAAU,eACVE,YAAY,gBACZC,UAAQ,EACRnB,MAAOG,KAAKd,MAAMC,SAClB8B,SAAU,SAACC,GAAD,OAAO,EAAKC,YAAYD,EAAEE,OAAOvB,UAE7C,4BACEgB,UAAU,mCACVQ,QAAS,kBAAM,EAAKC,YAAY,EAAKpC,MAAMC,WAC3CoC,UAAWvB,KAAKd,MAAMC,SAASqC,QAHjC,eAWN,yBAAKX,UAAU,cACb,wBAAIA,UAAU,cACXb,KAAKd,MAAME,KAAKqC,KAAI,SAAClB,GACpB,OACE,wBACEmB,IAAKnB,EAAKb,GACVmB,UAAU,+CAEV,2BACEC,KAAK,WACLa,KAAK,SACLC,QAASrB,EAAKT,OACdmB,SAAU,SAACC,GACT,EAAKW,YAAYX,EAAEE,OAAOQ,QAASrB,EAAKb,OAG5C,yBAAKmB,UAAU,MAAMN,EAAKV,OAC1B,0BACEgB,UAAS,sCACS,IAAhBN,EAAKT,OAAmB,eAAiB,kBAF7C,WAKsB,IAAhBS,EAAKT,OAAL,UAAoC,SAE1C,4BACEe,UAAU,8BACVU,UAAWhB,EAAKT,OAChBuB,QAAS,kBAAM,EAAKS,eAAevB,EAAKb,MAH1C,sB,GAtGFqC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c247bc1d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskItem: \"\",\n      list: [],\n    };\n  }\n\n  addTodoItem(todoValue) {\n    let val = todoValue.replace(/[^a-zA-Z0-9- ]/g, \"\");\n    if (val.trim() !== \"\") {\n      const newItem = {\n        id: Date.now(),\n        value: val,\n        isDone: false,\n      };\n      const todoList = [...this.state.list];\n      todoList.push(newItem);\n      this.setState({\n        list: todoList,\n        taskItem: \"\",\n      });\n    } else {\n      alert(\"failed to add\");\n    }\n  }\n\n  deleteTodoItem(delTaskId) {\n    const todoList = [...this.state.list];\n    const updatedtodoList = todoList.filter((item) => item.id !== delTaskId);\n    this.setState({\n      list: updatedtodoList,\n    });\n  }\n\n  updateInput(inputTask) {\n    this.setState({\n      taskItem: inputTask,\n    });\n  }\n\n  handleCheck(isChecked, taskId) {\n    let todoList = [...this.state.list];\n    const foundItemIndex = todoList.findIndex((item) => item.id === taskId);\n    todoList[foundItemIndex].isDone = isChecked;\n    this.setState({\n      list: todoList,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <form className=\"frmMrgn\">\n            <div className=\"form-group\">\n              <h1 className=\"text-center\">Todo App</h1>\n              <div className=\"input-group-prepend centerAlign\">\n                <input\n                  type=\"search\"\n                  className=\"form-control\"\n                  placeholder=\"What to do ??\"\n                  required\n                  value={this.state.taskItem}\n                  onChange={(e) => this.updateInput(e.target.value)}\n                />\n                <button\n                  className=\"btn buttonCustom btnColPinkShade\"\n                  onClick={() => this.addTodoItem(this.state.taskItem)}\n                  disabled={!this.state.taskItem.length}\n                >\n                  Add TODO\n                </button>\n              </div>\n            </div>\n          </form>\n\n          <div className=\"cardParent\">\n            <ul className=\"list-group\">\n              {this.state.list.map((item) => {\n                return (\n                  <li\n                    key={item.id}\n                    className=\"list-group-item d-flex  centerAlign lstItem\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"isDone\"\n                      checked={item.isDone}\n                      onChange={(e) => {\n                        this.handleCheck(e.target.checked, item.id);\n                      }}\n                    />\n                    <div className=\"tt\">{item.value}</div>\n                    <span\n                      className={`badge badge-pill customBdg ${\n                        item.isDone === false ? \"badge-danger\" : \"badge-success\"\n                      }`}\n                    >\n                      {`${item.isDone === false ? `pending` : \"Done\"}`}\n                    </span>\n                    <button\n                      className=\"btn btn-danger buttonCustom\"\n                      disabled={!item.isDone}\n                      onClick={() => this.deleteTodoItem(item.id)}\n                    >\n                      Delete\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}